openapi: 3.0.3
info:
  title: CID
  description: |-
    API for Actions and Workflows
  license:
    name: MIT
    url: https://github.com/cidverse/cid/blob/main/LICENSE
  contact:
    name: Philipp Heuer
    email: git@philippheuer.de
    url: https://github.com/cidverse/cid
  version: 1.0.0

servers:
  - url: http://localhost:8080
  - url: unix://tmp/my-socket.socket

tags:
  - name: observability
    description: Observability, Monitoring and Logging
  - name: info
    description: Information
  - name: artifact
    description: Artifact Operations
  - name: command
    description: Command Operations
  - name: file
    description: |-
        File Operations, e.g. reading, writing or listing files
  - name: vcs
    description: |-
        Version Control System Operations, e.g. querying commits, tags, releases or diffs
  - name: job
    description: |-
        Various Job related operations, e.g. querying the current module, environment or config

paths:
  # info api
  /v1/health:
    get:
      tags:
        - observability
      summary: healthcheck
      description: a very simple healthcheck
      operationId: healthV1
      responses:
        "200":
          description: healthcheck result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
              example:
                status: "up"
  /v1/log:
    post:
      tags:
        - observability
      summary: logs a message
      operationId: logMessageV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogMessagePayload'
      responses:
        201:
          description: Null response
          content: {}
  # current job
  /v1/job/module-action-data:
    get:
      tags:
        - job
      summary: query all info related to the currently running action
      operationId: moduleActionDataV1
      responses:
        200:
          description: config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleActionData'
  /v1/job/project-action-data:
    get:
      tags:
        - job
      summary: query all info related to the currently running action
      operationId: projectActionDataV1
      responses:
        200:
          description: config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectActionData'
  /v1/job/config:
    get:
      tags:
        - job
      summary: query the config for the currently running action
      operationId: configCurrent
      responses:
        200:
          description: config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionConfig'
  /v1/job/env:
    get:
      tags:
        - job
      summary: query the environment (NCI variables and variables have been granted explicit access to)
      operationId: projectEnv
      responses:
        200:
          description: project env
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectEnv'
  /v1/job/module:
    get:
      tags:
        - job
      summary: query current module (only available for module scoped actions)
      operationId: jobModuleV1
      responses:
        200:
          description: current module
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectModule'
        400:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/job/deployment:
    get:
      tags:
        - job
      summary: if the current job is a deployment, query the deployment details
      operationId: jobDeploymentV1
      responses:
        200:
          description: deployment details for the current module
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDeployment'
        400:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # repoanalyzer
  /v1/repoanalyzer/module:
    get:
      tags:
        - info
      summary: query modules
      operationId: moduleListV1
      responses:
        200:
          description: project modules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectModuleList'
  # vcs api
  /v1/vcs/commit:
    get:
      tags:
        - vcs
      summary: vcs commits
      operationId: vcsCommitsV1
      parameters:
        - name: changes
          in: query
          description: include changes in response
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: query commits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCSCommitList'
  /v1/vcs/commit/{id}:
    get:
      tags:
        - vcs
      summary: vcs commits
      operationId: vcsCommitsV1
      parameters:
        - name: id
          in: path
          description: commit id / hash
          required: true
          schema:
            type: string
        - name: changes
          in: query
          description: include changes in response
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: query commits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCSCommit'
  /v1/vcs/tag:
    get:
      tags:
        - vcs
      summary: vcs tags
      operationId: vcsTagsV1
      responses:
        200:
          description: query tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCSTagList'
  /v1/vcs/release:
    get:
      tags:
        - vcs
      summary: vcs releases
      operationId: vcsReleasesV1
      responses:
        200:
          description: query releases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCSReleaseList'
  /v1/vcs/diff:
    get:
      tags:
        - vcs
      summary: vcs diff between two references
      operationId: vcsDiffV1
      parameters:
        - name: from
          in: query
          description: from reference
          required: true
          schema:
            type: string
        - name: to
          in: query
          description: to reference
          required: true
          schema:
            type: string
      responses:
        200:
          description: query releases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCSDiff'
  # file api
  /files/list:
    get:
      tags:
        - file
      summary: List files
      operationId: listFiles
      parameters:
        - name: path
          in: query
          description: filter by path
          required: false
          example: src/main/java
          schema:
            type: string
        - name: extensions
          in: query
          description: filter by file extension(s)
          required: false
          example: [java, kt]
          schema:
            type: array
            items:
              type: string
              nullable: false

      responses:
        200:
          description: file list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileList'
  /files/read:
    get:
      tags:
        - file
      summary: Read file content
      operationId: readFiles
      parameters:
        - name: path
          in: query
          description: full path to the files
          required: false
          example: [src/main/java/Main.java, src/main/java/Main.kt]
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: list with file content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentList'
  /files/write:
    post:
      tags:
        - file
      summary: Write file content
      operationId: writeFile
      parameters:
        - name: file
          in: query
          description: full path to the file
          required: true
          example: src/main/java/Main.java
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        201:
          description: Null response
          content: {}
  # file api
  /artifact:
    get:
      tags:
        - artifact
      summary: List Artifacts
      operationId: artifactList
      parameters:
        - name: query
          in: query
          description: Search Query
          required: false
          schema:
            type: string
      responses:
        200:
          description: file list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactList'
    post:
      tags:
        - artifact
      summary: Uploads a Artifact
      operationId: artifactUpload
      parameters:
        - name: file
          in: query
          description: full path to the file
          required: true
          example: src/main/java/Main.java
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File (if multiple files should be archived)
                type:
                  type: string
                  description: Artifact Type (binary, report)
                format:
                  type: string
                  description: Content Format (Sarif, Syft SBOM, ...)
                format_version:
                  type: string
                  description: Content Format Version
      responses:
        201:
          description: Null response
          content: {}
  /artifact/download:
    get:
      tags:
        - artifact
      summary: Download Artifact
      operationId: artifactDownload
      parameters:
        - name: module
          in: query
          description: module slug (or root for project scoped artifacts)
          required: true
          example: root
          schema:
            type: string
        - name: type
          in: query
          description: artifact type
          required: true
          example: binary
          schema:
            type: string
        - name: name
          in: query
          description: file name
          required: true
          example: report.sarif
          schema:
            type: string
      responses:
        200:
          description: file content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  # command api
  /v1/command/execute:
    post:
      tags:
        - command
      summary: Executes a command
      operationId: executeCommandV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteCommand'
      responses:
        200:
          description: command execution result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteCommandResult'
components:
  schemas:
    Error:
      type: object
      properties:
        status:
          type: number
          example: 400
        title:
          type: string
          example: error title
        detail:
          type: string
          example: error details
    HealthStatus:
      title: HealthStatus
      required:
        - status
      type: object
      properties:
        status:
          type: string
          example: up
    LogMessagePayload:
      required:
        - level
        - message
      type: object
      properties:
        level:
          type: string
          description: log level
          enum:
            - trace
            - debug
            - info
            - warning
            - error
          example: info
        message:
          type: string
          example: hello world
        context:
          type: object
          description: dynamic key value properties / log context
          additionalProperties:
            type: object
    ModuleActionData:
      type: object
      properties:
        project-dir:
          type: string
          description: project root directory
          example: /projects/my-project
        config:
          $ref: '#/components/schemas/ActionConfig'
        env:
          $ref: '#/components/schemas/ProjectEnv'
        module:
          $ref: '#/components/schemas/ProjectModule'
        deployment:
          $ref: '#/components/schemas/ProjectDeployment'
    ProjectActionData:
      type: object
      properties:
        project-dir:
          type: string
          description: project root directory
          example: /projects/my-project
        config:
          $ref: '#/components/schemas/ActionConfig'
        env:
          $ref: '#/components/schemas/ProjectEnv'
    ActionConfig:
      type: object
      properties:
        debug:
          type: boolean
          description: enables debug logs for the action / logic
          default: false
        log:
          type: object
          description: "requested loglevel for specific components, prefixes: bin-"
          additionalProperties:
            type: string
        project_dir:
          type: string
          description: project root directory
          example: /projects/my-project/
        temp_dir:
          type: string
          description: temp directory
          example: /projects/my-project/.tmp
        artifact_dir:
          type: string
          description: artifact directory
          example: /projects/my-project/.dist
        host_name:
          type: string
          description: hostname
          example: localhost
        host_user_id:
          type: string
          description: user id
          example: 1000
        host_user_name:
          type: string
          description: login name of the current user
          example: root
        host_group_id:
          type: string
          description: group id
          example: 1000
        config:
          type: object
          description: dynamic configuration options for the action
          additionalProperties:
            type: object
    ProjectEnv:
      type: object
      additionalProperties:
        type: string
    ProjectDependency:
      type: object
      properties:
        type:
          type: string
          example: gomod
        id:
          type: string
          example: github.com/google/uuid
        version:
          type: string
          example: v1.3.0
    ProjectModule:
      type: object
      properties:
        project_dir:
          type: string
          description: project root directory
          example: /projects/my-project
        module_dir:
          type: string
          description: module root directory
          example: /projects/my-project
        discovery:
          type: array
          items:
            type: string
            example: "file~/projects/my-project/Dockerfile"
          description: module detected based on
        name:
          type: string
          description: module name
          example: my-project
        slug:
          type: string
          description: module name
          example: my-project
        type:
          type: string
          description: type of the module
          example: deployment
        build_system:
          type: string
          description: the build system used in this project
          example: container
        build_system_syntax:
          type: string
          description: variant of the build system used
          example: containerfile
        specification_type:
          type: string
          description: specification type
          example: openapi
        config_type:
          type: string
          description: type of configuration that was found, e.g. renovate, gitlab-ci, github-actions, ...
          example: renovate
        deployment_spec:
          type: string
          description: type of spec describing the deployment, e.g. dotenv, ...
          example: dotenv
        deployment_type:
          type: string
          description: type of deployment, e.g. ansible, helm, kustomize, ...
          example: helm
        deployment_environment:
          type: string
          description: deployment environment, e.g. dev, prod, ...
          example: dev
        language:
          type: object
          additionalProperties:
            type: string
          description: languages used in the project
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDependency'
          description: dependencies of the current module
        submodules:
          description: holds reference to all submodules, e.g. in gradle multi-module projects
          type: array
          items:
            $ref: '#/components/schemas/ProjectModule'
        files:
          type: array
          items:
            type: string
            example: "/projects/my-project/Dockerfile"
          description: all files in the project directory
    ProjectModuleList:
      type: array
      items:
        $ref: '#/components/schemas/ProjectModule'
    ArtifactList:
      type: array
      items:
        $ref: '#/components/schemas/Artifact'
    Artifact:
        type: object
        properties:
          build_id:
            type: string
            description: build id
            example: 1234
          job_id:
            type: string
            description: job id
            example: 1234
          id:
            type: string
            description: artifact id
            example: 1234
          module:
            type: string
            description: module slug
            example: root
          type:
            type: string
            description: artifact type
            example: binary
          name:
            type: string
            description: artifact name
            example: report.sarif
          format:
            type: string
            description: artifact format
            example: sarif
          format_version:
            type: string
            description: artifact format version
            example: 2.1.0
    # vcs
    VCSCommitList:
      type: array
      items:
        $ref: '#/components/schemas/VCSCommit'
    VCSCommit:
      type: object
      properties:
        hash_short:
          type: string
          description: vcs commit hash (short)
          example: 67504dd
        hash:
          type: string
          description: vcs commit hash (long)
          example: 67504dddb336879afa6470fb041071b7db23075c
        message:
          type: string
          description: message
          example: "feat: initial commit"
        description:
          type: string
          description: description
          example: ""
        author:
          $ref: '#/components/schemas/VCSTag'
        committer:
          $ref: '#/components/schemas/VCSTag'
        tags:
          $ref: '#/components/schemas/VCSTagList'
        authored_at:
          type: string
          format: date-time
          description: authored at
          example: "2022-11-21T23:55:08+01:00"
        committed_at:
          type: string
          format: date-time
          description: committed at
          example: "2022-11-21T23:55:08+01:00"
    VCSAuthor:
      type: object
      properties:
        name:
          type: string
          description: name
          example: Firstname Lastname
        email:
          type: string
          description: email
          example: noreply@examplee.com
    VCSTagList:
      type: array
      items:
        $ref: '#/components/schemas/VCSTag'
    VCSTag:
      type: object
      properties:
        type:
          type: string
          description: type of the tag
          example: tag
        value:
          type: string
          description: name of the tag
          example: v1.0.0
        hash:
          type: string
          description: vcs hash of the tag
          example: e7fccc74858e1e59225d9998e86949572b9c4332
    VCSReleaseList:
      type: array
      items:
        $ref: '#/components/schemas/VCSRelease'
    VCSRelease:
      type: object
      properties:
        version:
          type: string
          description: version
          example: 1.0.0
        ref:
          $ref: '#/components/schemas/VCSTag'
    VCSDiff:
      type: object
      properties:
        file_from:
          $ref: '#/components/schemas/CommitFile'
        file_to:
          $ref: '#/components/schemas/CommitFile'
        lines:
          type: array
          items:
            $ref: '#/components/schemas/VCSDiffLine'
          description: "List of changes between the files"
      required:
        - file_from
        - file_to
    VCSDiffLine:
      type: object
      properties:
        operation:
          type: integer
          description: "Operation type representing the change (e.g., addition, deletion, modification)"
        content:
          type: string
          description: "The content of the changed line"
      required:
        - operation
        - content
    CommitFile:
      type: object
      properties:
        path:
          type: string
          description: "Path to the file in the repository"
        sha:
          type: string
          description: "SHA hash of the file"
      required:
        - path
        - sha
    # files
    File:
      required:
        - path
      type: object
      properties:
        file:
          type: string
          description: full path to the file
          example: src/main/java/Main.java
        directory:
          type: string
          description: directory
          example: src/main/java
        file_name:
          type: string
          description: file name
          example: Main.java
        file_extension:
          type: string
          description: file extension
          example: java
    FileList:
      type: array
      items:
        $ref: '#/components/schemas/File'
    FileContent:
      required:
        - path
        - format
        - content
      type: object
      properties:
        path:
          type: string
          description: full path to the file
          example: src/main.py
        format:
          type: string
          description: format of the content (plain/base64)
          example: plain
        content:
          type: string
          description: full content of the file
          example: print("Goodbye, World!")
    FileContentList:
      type: array
      items:
        $ref: '#/components/schemas/FileContent'
    ExecuteCommand:
      type: object
      properties:
        command:
          type: string
          description: command
          required: true
          example: npm install
        constraint:
            type: string
            description: semver version constraint for the executable
            example: ">= 1.0.0, < 2.0.0"
        capture_output:
          type: boolean
          description: capture and return the output (stdout and stderr will be passed thru if not set)
          default: false
        work_dir:
          type: string
          description: directory to execute the command in (default = project root)
          example: /projects/my-project
        env:
          type: object
          additionalProperties:
            type: string
          description: directory to execute the command in (default = project root)
        ports:
          type: array
          description: expose container ports
          items:
            type: integer
            format: int32
    ExecuteCommandResult:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: command exit code
          example: 1
        command:
          type: string
          description: the command being executed
          example: npm install
        dir:
          type: string
          description: directory the command is executed in
          example: /projects/my-project
        error:
          type: string
          description: error message
          example: exit status 1
          nullable: true
        stdout:
          type: string
          description: standard output (if capture-output was request, empty otherwise)
          example: ""
        stderr:
          type: string
          description: error output (if capture-output was request, empty otherwise)
          example: ""
    ProjectDeployment:
      type: object
      nullable: true
      properties:
        deployment-type:
          type: string
          description: type of deployment, e.g. ansible, helm, kustomize, ...
          example: helm
        deployment-spec:
          type: string
          description: type of spec describing the deployment, e.g. dotenv, ...
          example: dotenv
        deployment-file:
          type: string
          description: path to the deployment spec file
          example: /projects/my-project/.env-dev
        properties:
            type: object
            description: a key value map of additional properties
            additionalProperties:
                type: string
