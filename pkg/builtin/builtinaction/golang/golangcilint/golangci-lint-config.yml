version: "2"

issues:
  max-same-issues: 0

run:
  concurrency: 4
  tests: true

linters:
  default: none
  enable:
    - errcheck # checking for unchecked errors, these unchecked errors can be critical bugs in some cases
    - gocritic # provides diagnostics that check for bugs, performance and style issues
    - gosec # inspects source code for security problems
    - govet # reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - revive # fast, configurable, extensible, flexible, and beautiful linter for Go, drop-in replacement of golint
    - staticcheck # is a go vet on steroids, applying a ton of static analysis checks
    - unused # checks for unused constants, variables, functions and types
    - unparam # reports unused function parameters

  settings:
    gocritic:
      enabled-checks:
        - hugeParam
    testifylint:
      enable:
        - blank-import
        - bool-compare
        - compares
        - contains
        - empty
        - encoded-compare
        - equal-values
        - error-is-as
        - error-nil
        - expected-actual
        - float-compare
        - formatter
        - go-require
        - len
        - negative-positive
        - nil-compare
        - regexp
        - require-error
        - suite-broken-parallel
        - suite-dont-use-pkg
        - suite-extra-assert-call
        - suite-method-signature
        - suite-subtest-run
        - suite-thelper
        - useless-assert
      bool-compare:
        ignore-custom-types: true
      expected-actual:
        pattern: ^expected
      formatter:
        # To enable go vet's printf checks.
        # Default: true
        check-format-string: false
        # To require f-assertions (e.g. `assert.Equalf`) if format string is used, even if there are no variable-length
        # variables, i.e. it requires `require.NoErrorf` for both these cases:
        # - require.NoErrorf(t, err, "unexpected error")
        # - require.NoErrorf(t, err, "unexpected error for sid: %v", sid)
        # To understand this behavior, please read the
        # https://github.com/Antonboom/testifylint?tab=readme-ov-file#historical-reference-of-formatter.
        # Default: false
        require-f-funcs: true
        # To require that the first element of msgAndArgs (msg) has a string type.
        # For example, in such case assertion like `assert.True(t, b, tt.case)` will be considered as invalid.
        # Default: true
        require-string-msg: false
      go-require:
        # To ignore HTTP handlers (like http.HandlerFunc).
        # Default: false
        ignore-http-handlers: true
      require-error:
        # Regexp for assertions to analyze. If defined, then only matched error assertions will be reported.
        # Default: ""
        fn-pattern: ^(Errorf?|NoErrorf?)$
      suite-extra-assert-call:
        # To require or remove extra Assert() call?
        # Default: remove
        mode: require
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    paths:
      - vendor/
      - tmp/
      - third_party$
      - builtin$
      - examples$
formatters:
  enable:
    - gofumpt
  settings:
    gofumpt:
      module-path: ""
  exclusions:
    generated: lax
    paths:
      - vendor/
      - tmp/
      - third_party$
      - builtin$
      - examples$
