{{- /*gotype: github.com/cidverse/cid/pkg/app/appgitlab.TemplateData*/ -}}
{{- $root := . -}}
# cid-workflow-version: {{ .Version }}

# This file is generated by the CID Workflow GitLab App.
# DO NOT EDIT!

# global defaults
default:
{{- if eq $root.ContainerRuntime "podman" }}
  image: {{ $root.GetDependencyReference "quay.io/podman/stable" }}
{{- else if eq $root.ContainerRuntime "docker" }}
  image: {{ $root.GetDependencyReference "registry.gitlab.com/cidverse/container-images/ci-gitlab-docker" }}
{{- end }}
  before_script:
    - curl -L -o /usr/local/bin/cid https://github.com/cidverse/cid/releases/download/v{{ ($root.GetDependency "cid").Version }}/linux_amd64
    - chmod +x /usr/local/bin/cid
    - cid version
    - cid catalog update
    - cid catalog list
    - cid executables update

# variables
variables:
  # git settings
  GIT_STRATEGY: clone
  GIT_DEPTH: 10
  {{- if eq $root.ContainerRuntime "docker" }}
  # docker-in-docker
  SERVICE_PORT_2376_TCP_PORT: 2375
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  {{- end }}

{{- if eq $root.ContainerRuntime "docker" }}
# services
services:
- name: {{ $root.GetDependencyReference "docker.io/docker" }}
  alias: docker
{{- end }}

# stages
stages:
{{- if .Stages }}
{{- range $stage := .Stages }}
    - {{ $stage }}
{{- end }}
{{- end }}

# configuration snippets
.default-job: &default_job
  {{ if .RunnerTags }}
  tags:
    {{- range $tag := .RunnerTags }}
    - {{ $tag }}
    {{- end }}
  {{- end }}
  allow_failure: false
  interruptible: true
  retry:
    max: 2
    when:
      - runner_system_failure
      - api_failure
      - scheduler_failure

{{- range $wf := $root.Workflows }}

# {{ $wf.Name}}

{{- range $step := $wf.Plan.Steps }}
## {{ $step.Name }}
"{{ $wf.NameSlug }}/{{ $step.Name }}":
    <<: *default_job
    stage: {{ $step.Stage }}
    needs: [{{- range $index, $elem := $step.RunAfterByName }}{{ if $index }}, {{ end }}"{{ $wf.NameSlug }}/{{ $elem }}"{{ end -}}]
    dependencies: [{{- range $index, $elem := $step.UsesOutputOfByName }}{{ if $index }}, {{ end }}"{{ $wf.NameSlug }}/{{ $elem }}"{{ end -}}]
    {{- if $step.Environment }}
    environment:
      name: {{ $step.Environment}}
    {{- end }}
    timeout: {{ $wf.JobTimeout }}m
    rules:
{{- if $wf.WorkflowConfig.TriggerPush }}
      {{- range $branch := $wf.WorkflowConfig.TriggerPushBranches }}
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "{{ $branch }}"'
        when: always
        {{- end }}
        {{- range $tag := $wf.WorkflowConfig.TriggerPushTags }}
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^{{ $tag }}$/'
        when: always
        {{- end }}
      {{- end }}
{{- if $wf.WorkflowConfig.TriggerPullRequest }}
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        {{- if and $step.ModuleDir $step.RunIfChanged }}
        changes:
          paths:
            {{- range $path := $step.RunIfChanged }}
            - {{ $step.ModuleDir }}/{{ $path }}
            {{- end }}
        {{- end }}
        when: always
{{- end }}
{{- if $wf.WorkflowConfig.TriggerSchedule }}
      - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_SCHEDULE_DESCRIPTION == "{{ $wf.NameSlug }}"'
        when: always
{{- end }}
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "{{ $wf.WorkflowKey }}" --step "{{ $step.Slug }}"
    {{- if or
        ($step.HasOutputWithTypeAndFormat "report" "jacoco")
        ($step.HasOutputWithTypeAndFormat "report" "cobertura")
    }}
    coverage: /Test-Coverage:(\d+\.\d+)%/ # used for percentage
    {{- end }}
    artifacts:
      name: "{{ $wf.NameSlug }}/{{ $step.Name }}"
      paths:
        - .dist/{{ $step.Slug }}/
      expire_in: 1 day
      {{- if or
        ($step.HasOutputWithTypeAndFormat "report" "gl-codequality")
        ($step.HasOutputWithTypeAndFormat "report" "junit")
        ($step.HasOutputWithTypeAndFormat "report" "jacoco")
        ($step.HasOutputWithTypeAndFormat "report" "cobertura")
      }}
      reports:
        {{- if $step.HasOutputWithTypeAndFormat "report" "gl-codequality" }}
        codequality: .dist/{{ $step.Slug }}/report/gl-codequality/*.json
        {{- end }}
        {{- if $step.HasOutputWithTypeAndFormat "report" "junit" }}
        junit: .dist/{{ $step.Slug }}/report/junit/*.xml
        {{- end }}
        {{- if $step.HasOutputWithTypeAndFormat "report" "jacoco" }}
        coverage_report: # used for visualization only
          coverage_format: jacoco
          path: .dist/{{ $step.Slug }}/report/jacoco/*.xml
        {{- else if $step.HasOutputWithTypeAndFormat "report" "cobertura" }}
        coverage_report: # used for visualization only
          coverage_format: cobertura
          path: .dist/{{ $step.Slug }}/report/cobertura/*.xml
        {{- end }}
      {{- end }}
{{- end }}
{{- end }}
